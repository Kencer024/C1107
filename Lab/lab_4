//////////////////////////////////////////////////////////////////////

#include <stdio.h>
#include <stdlib.h>

///////////////////////////////////////////////////////////////////////

typedef struct _btnode{
int item;
struct _btnode *left;
struct _btnode *right;
} BTNode;

///////////////////////////////////////////////////////////////////////

void insertBSTNode(BTNode **node, int value);
void printBSTInOrder(BTNode *node);
int isBST(BTNode *node, int min, int max);
BTNode *removeBSTNode(BTNode *node, int value);
BTNode *findMin(BTNode *p);

///////////////////////////////////////////////////////////////////////

int main(){
	int i=0;

	BTNode *root=NULL;

	//question 1
	do{
		printf("input a value you want to insert(-1 to quit):");

		scanf("%d",&i);
		if (i!=-1)
			insertBSTNode(&root,i);
	}while(i!=-1);

	//question 2
	printf("\n");
	printBSTInOrder(root);

	//question 3
	if ( isBST(root,-1000000, 1000000)==1)
		printf("It is a BST!\n");
	else
		printf("It is not a BST!\n");

	//question 4
	do{
		printf("\ninput a value you want to remove(-1 to quit):");
		scanf("%d",&i);
		if (i!=-1)
		{
			root=removeBSTNode(root,i);
			printBSTInOrder(root);
		}
	}while(i!=-1);


	return 0;
}

//////////////////////////////////////////////////////////////////////

void insertBSTNode(BTNode **node, int value)
{
	// write your code here
	// for null node or for inserting in
	if(*node == NULL){
        // malloc 1st
        *node = malloc(sizeof(BTNode));
        (*node)->item = value;
        (*node)->left = NULL;
        (*node)->right = NULL;
        }
    else
    {
        if(value <(*node)->item){
            insertBSTNode(&((*node)->left), value);
        }
        else if(value > (*node)->item){
            insertBSTNode(&((*node)->right), value);
        }
        else
            return;
    }
}

//////////////////////////////////////////////////////////////////////

void printBSTInOrder(BTNode *node)
{
	// write your code here
	if(node == NULL)
        return;
    printBSTInOrder(node->left);
    printf("%d, ",node->item);
    printBSTInOrder(node->right);

    return;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int isBST(BTNode *node, int min, int max) // the item stored in node has to be smaller than max and larger than min
{
	// write your code here
	if(node == NULL)
        return 1;

    if( node->item <min || node->item > max){
        return 0;
    }
    // replace the max or min with node->item for it to compare
    return isBST(node->left,min,node->item)&&isBST(node->right,node->item,max);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BTNode *removeBSTNode(BTNode *node, int value)
{
	// write your code here
	// if no such value then return NULL
	// traverse left side if <value and etc for right
	// for 2 children, find the min of node->right AKA 5 is parent and 6 is the grandchild of 5(7 is child)
	// node->item(5) = p->item(6); => node->right = removeBSTNode(node->right,p->item) [continue recursively until node = 6]
	// once node(6) has no child, => free(p) hence removing 6;
    BTNode *p;

	if(node == NULL)
	{
	    printf("cant find the fucking value\n");
	    return NULL;
	}

	// Traversing
	if(node->item >value)
        node->left = removeBSTNode(node->left,value);

    else if(node->item<value)
        node->right = removeBSTNode(node->right,value);

	else
        if(node->left != NULL && node->right != NULL)
        {
            p = findMin(node->right);
            node->item = p->item;
            node->right = removeBSTNode(node->right, p->item);
        }
        else
        {

            p = node;
            if(node->left != NULL)
                node = node->left;
            else
                node = node->right;
            free(p);
        }
    return node;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

BTNode *findMin(BTNode *p)
{
	// write your code here
	if(p->left != NULL)
        return findMin(p->left);
    else
        return p;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
