void removeUntil(Stack *s, int value){

	// write your code here
	//ListNode *cur;
	//cur = s->tail;
	if(s == NULL)return;
	while(pop(s) != value){}
	push(s, value);
}

////////////////////////////////////////////////////////////
//Question 2

void recursiveReverse(Queue *q){

	// write your code here
	Stack s;
	//LinkedList a,b;
	int temp;
	s.ll.head = NULL;
	s.ll.size = 0;
	while(isEmptyQueue(q)!=1){
            temp = dequeue(q);
            push(&s,temp);
	}
	while(isEmptyStack(&s)!=1){
	    temp = pop(&s);
        enqueue(q,temp);
	}
}

////////////////////////////////////////////////////////////
//Question 3

int palindrome(char *word){

	// write your code here
	Stack s;
	Queue q, q1;
	q1.ll.head = NULL;
	q1.ll.size = 0;
	q.ll.head = NULL;
	q.ll.size =0;
	int i =0;
	while(word[i] != '\0'){
            if((int)word[i] == 97);
            else{push(&q,(int)word[i]);
           }
            i++;
	}
	q1 = q;
	printList(&q1);
	recursiveReverse(&q);
	printList(&q);
	return 0;
}
