///////////////////////////////////////////////////////////////Question_1/////////////////////////////////////////////////////////////////////////////////////////////////////
// just normal enqueue from the linkedlist
void createQueueFromLinkedList(LinkedList *ll, Queue *q)
{

	/* add your code here */
	ListNode *cur;
	cur = ll->head;
	while(cur){
        enqueue(q, cur->item);
        cur = cur->next;
	}
}

void removeOddValues(Queue *q)
{

	/* add your code here */
	Queue q1;
	q1.ll.head = NULL;
	q1.ll.size = 0;
	int temp;
	while(!isEmptyQueue(q)){       //check for empty queue
        temp = dequeue(q);        //temp holds value of dequeue
        if(temp%2 == 0){             //check for even int
            enqueue(&q1, temp);
        }
	}
	while(!isEmptyQueue(&q1)){
        temp = dequeue(&q1);
        enqueue(q,temp);
	}

}
}

/////////////////////////////////////////////////////////////__end__///////////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////Question_2//////////////////////////////////////////////////////////////////////////////////////////////////////

void createStackFromLinkedList(LinkedList *ll, Stack *s)
{

	/* add your code here */
	ListNode *cur;
	int temp;
	cur = ll->head;
	while(cur != NULL){              //loop until ll is empty
        temp = cur->item;            //let the temp int be the value of item
        push(s, temp);
        cur = cur->next;             //traverse cur
	}
}

void removeEvenValues(Stack *s)
{

	/* add your code here */
	Stack s1;
	s1.ll.head = NULL;
	s1.ll.size = 0;
	int temp;
	while(!isEmptyStack(s)){
        temp = pop(s);
        push(&s1, temp);
	}
	while(!isEmptyStack(&s1)){
        temp = pop(&s1);
        if(temp%2 !=0){
            push(s, temp);
        }
	}


}

/////////////////////////////////////////////////////////////__end__///////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////Question_3//////////////////////////////////////////////////////////////////////////////////////////////////////


int isStackPairwiseConsecutive(Stack *s)
{

	/* add your code here */
	if(s->ll.size %2 != 0 || isEmptyStack(s) == 1)return 0;    //check whether stack has even items or exist

	Stack s1;
	s1.ll.head = NULL;
	s1.ll.size = 0;
    int temp, temp_n;
    while(!isEmptyStack(s)){                                //push s to s1
        temp = pop(s);
        push(&s1, temp);
    }
    while(!isEmptyStack(&s1)){
        temp = pop(&s1);                                    //pops value of s1 
        temp_n = pop(&s1);                                  //pops nxt value of s1
        if(temp_n != temp + 1 && temp_n != temp -1){        //if temp_n is neither temp + or - 1 then return 0
            return 0;
        }
        else{
            push(s, temp);
            push(s, temp_n);
        }
    }
    return 1;

}

/////////////////////////////////////////////////////////////__end__/////////////////////////////////////////////////////////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////////Question_4//////////////////////////////////////////////////////////////////////////////////////////////////////////

void reverse(Queue *q)
{

	/* add your code here */
	Stack s;
	s.ll.head = NULL;
	s.ll.size = 0;
	int temp;
	while(!isEmptyQueue(q)){
        temp = dequeue(q);
        push(&s, temp);
	}
	while(!isEmptyStack(&s)){
        temp = pop(&s);
        enqueue(q, temp);
	}
}

/////////////////////////////////////////////////////////////__end__/////////////////////////////////////////////////////////////////////////////////////////////////////////////


