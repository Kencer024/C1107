///////////////////////////////////////////////////////////////Question_1/////////////////////////////////////////////////////////////////////////////////////////////////////
// just normal enqueue from the linkedlist
void createQueueFromLinkedList(LinkedList *ll, Queue *q)
{

	/* add your code here */
	ListNode *cur;
	cur = ll->head;
	while(cur){
        enqueue(q, cur->item);
        cur = cur->next;
	}
}


// Created 2 queues, 1 for even no. and the other for odd
// added the odd no. to original queue by enqueue and dequeue
// reminder to put ! in while( !isEmptyQueue(q)) or else it will not work
void removeOddValues(Queue *q)
{

	/* add your code here */
	Queue q1, q2;
	q1.ll.head = NULL;
	q1.ll.size = 0;
	q2.ll.head = NULL;
	q2.ll.size =0;
	int temp, i=0;
	while( !isEmptyQueue(q)){       //check for empty queue
        temp = dequeue(q);        //temp holds value of dequeue
        if(i%2 == 0){             //check for even index 0,2,4 etc
            enqueue(&q1, temp);
        }
        else {
            enqueue(&q2, temp);
        }
        i++;                      //index++
	}
	while( !isEmptyQueue(&q2)){
        temp = dequeue(&q2);      //dequeue odd queue and queue it into original q
        enqueue(q,temp);
	}
}

/////////////////////////////////////////////////////////////__end__///////////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////Question_2//////////////////////////////////////////////////////////////////////////////////////////////////////

void createStackFromLinkedList(LinkedList *ll, Stack *s)
{

	/* add your code here */
	ListNode *cur;
	int temp;
	cur = ll->head;
	while(cur != NULL){              //loop until ll is empty
        temp = cur->item;            //let the temp int be the value of item
        push(s, temp);
        cur = cur->next;             //traverse cur
	}
}

void removeEvenValues(Stack *s)
{

	/* add your code here */
	Stack s1;
	s1.ll.head = NULL;
	s1.ll.size = 0;
	int temp;
	while(!isEmptyStack(s)){
        temp = pop(s);
        push(&s1, temp);
	}
	while(!isEmptyStack(&s1)){
        temp = pop(&s1);
        if(temp%2 !=0){
            push(s, temp);
        }
	}


}
