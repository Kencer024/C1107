//BFS
//mark visit by making LL = NULL, however cant print graph at the end
//tell edge by the most rigt vertex, eg 7:5->4->, vertf = 4; 5:7->3 & 4:3->1, vertf =1; etc
//everytime dequeue == vertf then ++ as it means that the level is done
int BFS (Graph g, int v, int w){

    // Write your code here
    Queue q1;
    q1.head = NULL;
    q1.size = 0;
    q1.tail = NULL;

    Graph g1;
    g1.E = 0;
    g1.V =0;
    g1.list = NULL;

    g1 = g;
    //make visited node = NULL so will skip when checked

    int i=0,w1, vert,vertf,flag =0;
    ListNode *temp;


    enqueue(&q1, v);      //enqueue 7
    vertf = v;
    while(!isEmptyQueue(q1))
    {
        w1 = getFront(q1);          //w1 = 7
        dequeue(&q1);
        printf("Visited %d\n",w1);
        if(w1 == w)
            return i;
        temp = g1.list[w1-1];          //node of 7

        if(w1 == vertf)
            {
                flag = 1;
                i++;
                printf("vertf == w1, w1 is %d, i is %d\n",vertf,i);
            }

        while(temp)
        {



            vert = temp->vertex;   //7->5;5->4
            printf("Visited2 %d\n",vert);
            enqueue(&q1, vert);    //enq 5 & 4
            temp = temp->next;


            if(flag ==1)
            {
                vertf = vert;
                printf("vertf is %d\n",vertf);
            }



        }
        g1.list[w1-1] = NULL;        //means visited

        flag =0;



    }



    return -1;
}


//BFS all cases pass
//now use an array to tell whether visited 
//flag 2 is to tell whether its visited anot
int BFS (Graph g, int v, int w){

    // Write your code here
    Queue q1;
    q1.head = NULL;
    q1.size = 0;
    q1.tail = NULL;

    Graph g1;
    g1.E = 0;
    g1.V =0;
    g1.list = NULL;

    g1 = g;

    int check[g.V];        //put vertex in linked list and manual search ?
    //make visited node = NULL so will skip when checked

    int i=0,w1, vert,vertf,flag =0,j=0,k, flag2 =0;
    ListNode *temp;


    enqueue(&q1, v);      //enqueue 7
    vertf = v;
    while(!isEmptyQueue(q1))
    {
        w1 = getFront(q1);          //w1 = 7
        dequeue(&q1);
        //printf("Visited %d\n",w1);
        if(w1 == w)
            return i;
        temp = g1.list[w1-1];          //node of 7



        if(w1 == vertf)
            {
                flag = 1;
                i++;
                //printf("vertf == w1, w1 is %d, i is %d\n",vertf,i);
            }

        for(k=0;k<g1.V;k++)
        {
            if(w1 == check[k])
            {
                flag2 = 1;
                break;
            }
        }

        if(flag2 == 0)
        {
            while(temp)
            {
                vert = temp->vertex;   //7->5;5->4
                //printf("Visited2 %d\n",vert);
                enqueue(&q1, vert);    //enq 5 & 4
                temp = temp->next;


                if(flag ==1)
                {
                    vertf = vert;
                    //printf("vertf is %d\n",vertf);
                }

            }
        }

        check[j] = w1;
        flag =0;
        flag2 =0;
        j++;



    }



    return -1;
}



//graph connection
//only 2 test case passed
//used wrong idea of a node being able to connect with every other node when i should using bfs or dfs traversal
int CC (Graph g)
{
    // Write your code here
    //loop through the whole sequence
    int i,j;

    ListNode *temp1;
    //printf("g.V is %d\n", g.E);
    if(g.E == 0)
        return -1;

    for(i=0;i<g.V;i++)  //this loop will loop g.list
    {
        temp1 = g.list[i];
        printf("%d\n",temp1->vertex);
        for(j=0;j<g.V-1;j++)
        {

            if(temp1->next == NULL)
                return -1;
            temp1 = temp1->next;
        }
    }

    return 1;
}


//GC 3 test case pass but 1 runtime error
//essentially put BFS in CC function
//solved by putting int check[20] instead of g.V
int CC (Graph g)
{
    // Write your code here
    //loop through the whole sequence
    int i,j,k,t=0,s;          //traversal variables

    int check[20], ch_flag = 0;    //checking array n flag

    if(g.E == 0)        //check whether the graph is just 1 point
        return -1;

    ListNode *temp1;

    int n = g.V;

    int flag = 0;       //acts a return for my bfs

    int w,vert;         //variables

    Queue q1;           //initialise queue
    q1.head = NULL;
    q1.size = 0;
    q1.tail = NULL;


    for(i=1;i<=n;i++)
    {
        for(j=1;j<=n;j++)
        {
            //
            if(i != j)
            {
                enqueue(&q1, i);

                //BFS traversal
                while(!isEmptyQueue(q1))
                {
                    w = getFront(q1);
                    dequeue(&q1);
                    temp1 = g.list[w-1];

                    //printf("w, j is %d, %d\n",w,j);

                    if(w == j)
                    {
                        flag = 1;
                        break;
                    }
                    //printf("A\n");
                    //check for visitation
                    for(k=0;k<n;k++)
                    {
                        if(w == check[k])
                        {
                            ch_flag =1;
                            break;
                        }
                    }
                    //printf("B\n");
                    if(ch_flag == 0)        //means not visited
                    {
                        while(temp1)
                        {
                            vert = temp1->vertex;
                            enqueue(&q1, vert);
                            temp1 = temp1->next;
                        }
                        check[t] = w;
                    }



                    //printf("C\n");
                    ch_flag = 0;
                    t++;

                }       //end while(!emptyqueue)

            }
            //printf("D\n");
            removeAllItemsFromQueue(&q1);
            if((flag == 0)&&(i!=j))       //means loop through everything already and got no match
                return -1;
            else                //match found hence must reset visitation
            {
                //printf("check reset \n");
                for(s=0;s<n;s++)
                {
                    check[s] = 0;
                }
                flag = 0;
                t = 0;
                //printf("E\n");
            }

        }       //end of for j
    }       //end of for i



    return 1;
}



//sumToC
//only 1 test case passed but code blocks everything works
void sumToC(LinkedList* ll, int C, ArrayList* al)
{
   // Write your code here
   //1,2,3 =6, can backtrack to 1 instead of 2 as the 2 branch everything probably would not worked
   int i, i2,n =0,j,j2;

   ListNode *temp1, *temp2, *temp3;

    i=1;
   insertNode(ll, ll->size, i);
   temp1 = ll->head;
   i2 = i+1;
   //i2 is 2

   //printf("i2 is %d\n",i2);
   j2 = i2;
   while(j2 <= C)
   {

        i2 = j2;
       //printf("j2 is %d ",j2);

       if(i2 == C)
       {
           break;
       }

       while(ll->sum<C)
       {
           insertNode(ll, ll->size, (i2));      //inserts 2 in
           //printf("i2 is %d ",i2);
           //printf("ll size is %d\n",ll->size);

           if(ll->sum == C)
           {
               //printf("sum found\n");
               temp3 = findNode(*ll,ll->size-2);
               j2 = temp3->item;                   //j = the 2 node back item
               break;
           }
           i2++;

       }
       //printf("sum is %d\n", ll->sum);

        temp2 = ll->head;
        //printf("A\n");
        if(ll->sum == C)
        {
            n++;
            //printf("B\n");
            for(j=0;j<ll->size;j++)    //from 1 to 6
            {

                //printf("C\n");
                printf(" %d ",temp2->item);
                temp2 = temp2->next;

            }
            printf("\n");
            //printf("ll size is %d\n",ll->size);
        }



       //back track 2 slots
       removeNode(ll,ll->size-1);
       removeNode(ll,ll->size-1);
       if(ll->size == 0)
       {
           ll->sum = 0;
       }

       j2++;



   }    //endwhile
    printf(" %d", C);

}
