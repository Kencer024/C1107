
//doubly linked list with 1 test case error
int HashInsert(HashTable* Q1Ptr, int key)
{
    //Write your code here
    int index;
    ListNode *newNode, *temp;

    if(HashSearch(*Q1Ptr, key)!=NULL)   //duplicate
        return 0;

    if(Q1Ptr->hSize!=0)
        index  = Hash(key,Q1Ptr->hSize);

    //The key is inserted from the front.
    newNode = (ListNode *) malloc(sizeof(ListNode));
    newNode->key = key;
    newNode->next= Q1Ptr->Table[index].head;
    //temp = newNode->next;
    Q1Ptr->Table[index].head = newNode;
    if(Q1Ptr->Table[index].size!= 0)
        Q1Ptr->Table[index].head->next->pre = Q1Ptr->Table[index].head;

    Q1Ptr->Table[index].size++;
    Q1Ptr->nSize++;

    return 1; //insertion is done successfully

}

int HashDelete(HashTable* Q1Ptr, int key)
{


    //Write your code here
    int index;
    ListNode *temp;

    if(HashSearch(*Q1Ptr, key)==NULL)   //duplicate
        return 0;

    if(Q1Ptr->hSize!=0)
        index  = Hash(key,Q1Ptr->hSize);

    //The key is inserted from the front.
    temp = HashSearch(*Q1Ptr, key);
    //printf("temp is %d\n",temp->pre->key);
    if(temp->pre != NULL && temp->next != NULL)
    {   
        temp->pre->next = temp->next;
        temp->next->pre = temp->pre;
    }
    else if(temp->pre == NULL)
    {
        Q1Ptr->Table[index].head = temp->next;
    }
    else if(temp->next == NULL)
    {
        temp->pre->next = NULL;
    }
    Q1Ptr->Table[index].size--;
    Q1Ptr->nSize--;
    free(temp);

    return 1; //insertion is done successfully

}


//zavier inspired ans
int HashInsert(HashTable* Q1Ptr, int key)
{
    //Write your code here
    int index;
    ListNode *newNode, *temp;

    if(HashSearch(*Q1Ptr, key)!=NULL)   //duplicate
        return 0;

    if(Q1Ptr->hSize!=0)
        index  = Hash(key,Q1Ptr->hSize);

    //The key is inserted from the front.
    newNode = (ListNode *) malloc(sizeof(ListNode));
    newNode->key = key;
    newNode->next= NULL;
    newNode->pre = NULL;

    temp = Q1Ptr->Table[index].head;

    if(temp == NULL)
    {
        Q1Ptr->Table[index].head = newNode;
        Q1Ptr->Table[index].head->next = NULL;
    }
    //temp = newNode->next;
    else
    {
        newNode->next = Q1Ptr->Table[index].head;
        Q1Ptr->Table[index].head->pre = newNode;
        Q1Ptr->Table[index].head = newNode;
    }


    (Q1Ptr->Table[index].size)++;
    //Q1Ptr->nSize++;

    return 1; //insertion is done successfully

}

//open addr(my original with 1 test case pass only)
int HashInsert(int key, HashSlot hashTable[])
{
   //Write your code here

    int index, keymod,i=0, n=0;

    index = hash1(key);


    //checking for duplicate keys
    //if table is full and insert duplicate keys
    
    while(i<TABLESIZE)
        {
            i++;
            if(hashTable[i].key == key)
                return -1;
        }

    i=0; //i=0 for traversal later

    //If its empty then can just insert else mod the key then add to key then hash
    if(hashTable[index].indicator == DELETED || hashTable[index].indicator == EMPTY)
    {
        hashTable[index].indicator = USED;
        hashTable[index].key = key;

    }
    else if(hashTable[index].indicator != EMPTY)
    {
        //check for duplicate keys
        //if slot is deleted, but need check for duplicates 1st then can just insert in

        keymod = hash2(key);

        while(hashTable[index].indicator != EMPTY)
        {
            if(n>=TABLESIZE)
                return n;
            i++;
            n++;
            index = hash1(key+i*keymod);
            if(hashTable[index].indicator == DELETED || hashTable[index].indicator == EMPTY)
                break;


        }



        hashTable[index].indicator = USED;
        hashTable[index].key = key;
    }



    return n; //insertion is done successfully

}

int HashDelete(int key, HashSlot hashTable[])
{
    //Write your code here

    int index, keymod,i=0, n=0;



    index = hash1(key);
    keymod = hash2(key);

    while(hashTable[index].indicator == USED)
        {
            if(n>=TABLESIZE)
                return n;

            i++;
            n++;


            if(hashTable[index].indicator == DELETED)
                index++;
            if(hashTable[index].key == key)
            {
                hashTable[index].indicator = DELETED;
                return n;
            }

            index = hash1(key+i*keymod);

        }

    return -1;
}

//chiam inspired ans for open addr(test case 2 n 4 fail)
int HashInsert(int key, HashSlot hashTable[])
{
   //Write your code here
    int index, keymod,i=0, n=0,del_;

    index = hash1(key);


    //checking for duplicate keys
    while(i<TABLESIZE)
        {
            if(hashTable[index].key == key && hashTable[index].indicator == USED)
                return -1;

            else if(hashTable[index].indicator == EMPTY)
            {
                hashTable[index].indicator = USED;
                hashTable[index].key = key;
                return i;
            }



            else if(hashTable[index].indicator == DELETED)//still need other slots for duplicates
            {
                n=1;
                keymod = hash2(key);
                del_ = hash1(key + n*keymod); //use del_ to traverse to check for dupes
                while(del_ != index)
                {
                    if(hashTable[del_].key == key)
                        return -1;
                    n++;
                    del_ = hash1(key+n*keymod);
                }
                hashTable[index].indicator = USED;
                hashTable[index].key = key;
                return i;
            }

            keymod = hash2(key);
            n++;
            index = hash1(key+n*keymod);


            i++;
        }
        return i;



}

int HashDelete(int key, HashSlot hashTable[])
{
    //Write your code here

    int index, keymod,i=0, n=0;



    index = hash1(key);
    keymod = hash2(key);

    while(hashTable[index].indicator == USED)
        {
            if(n>=TABLESIZE)
                return n;

            i++;
            n++;


            if(hashTable[index].indicator == DELETED)
                index++;


            if(hashTable[index].key == key)
            {
                hashTable[index].indicator = DELETED;
                return n;
            }

            index = hash1(key+i*keymod);

        }

    return -1;
}

//zavier inspired ans for open addr(all pass)
int HashInsert(int key, HashSlot hashTable[])
{
   //Write your code here
    int index, keymod,i=0, n=0,del_,del_comp=0;

    index = hash1(key);

    keymod = hash2(key);
    //checking for duplicate keys
    while(i<TABLESIZE)
        {
            index = hash1(key+i*keymod);

            if(hashTable[index].indicator == EMPTY)
            {
                hashTable[index].indicator = USED;
                hashTable[index].key = key;
                return n;
            }

            else if(hashTable[index].indicator ==USED)
            {
                n++;
                if(hashTable[index].key == key)
                    return -1;
            }


            else //still need other slots for duplicates
            {
                del_comp = i;
                while(del_comp < TABLESIZE)
                {
                    del_ = hash1(key + del_comp*keymod); //use del_ to traverse to check for dupes
                    if(hashTable[del_].indicator == USED)
                    {
                        n++;
                        if(hashTable[del_].key == key)
                            return -1;
                    }
                    else if(hashTable[del_].indicator == EMPTY)
                    {
                        hashTable[index].indicator = USED;
                        hashTable[index].key = key;
                        return n;
                    }
                    del_comp++;
                }
                hashTable[index].indicator = USED;
                hashTable[index].key = key;
                return n;
            }

            
            i++;
        }
        return n;



}

int HashDelete(int key, HashSlot hashTable[])
{
    //Write your code here

    int index, keymod,i=0, n=0, j=0;



    index = hash1(key);
    keymod = hash2(key);

    while(n<TABLESIZE)
        {

            if(hashTable[index].indicator == EMPTY)
                return -1;

            if(hashTable[index].key == key)
            {
                if(hashTable[index].indicator == DELETED)
                {
                    j++;
                    n++;

                }
                else
                {
                    hashTable[index].indicator = DELETED;
                    return n+1-j;
                }

            }
            i++;
            n++;

            index = hash1(key+i*keymod);

        }

    return -1;
}



//coascled hash
int HashInsert(int key, HashSlot hashTable[])
{
    // Write your code here
    //4 cases, key mod prime is empty, key mod prime is filled, duplicate keys, table full lol
    //if it loops back to OG means full
    //if key is empty then normal close addressing; if its filled then OG key->next = new key index
    //if duplicate key then return -1
    int index,i,pre, OG;

    //first check for duplicate keys
    if(HashFind(key, hashTable) == -1)
        return -1;

    index = hash(key);

    OG =index;

    //now to check whether the number is first mod
    if(hashTable[index].indicator == EMPTY)
    {
        hashTable[index].key = key;
        hashTable[index].indicator = USED;
        return index;
    }
    //now got 2 case, table full or not full lor
    //if mod got thing alr then juz ++;
    //pre = index of prev # then pre->next = index;
    else
    {
        pre = index;
        while(hashTable[index].indicator!=EMPTY)
        {
            if(hashTable[index].key == key)     //duplicate key case
                return -1;
                                 //for later if found empty slot then hashTable[pre].next = index

            if(hashTable[index].next != -1)
                {
                    pre=index;
                    index=hashTable[index].next;
                }
            else
                index++;

            if(index>TABLESIZE)             //if it goes all the way down and still no slot, it has to loop back up
                index =0;
            if(index == OG)                 //1 loop done
                return 1;
        }
        hashTable[pre].next = index;
        hashTable[index].key=key;
        hashTable[index].indicator=USED;
        return index;
    }

}


int HashFind(int key, HashSlot hashTable[])
{
    // Write your code here
    int index;

    index = hash(key);

    //if its the first key
    if(hashTable[index].key == key)
            return -1;

    while(hashTable[index].next != -1){
        if(hashTable[index].key == key)
            return -1;
        else
        {
            index = hashTable[index].next;
        }
    }

    return 0;
}
