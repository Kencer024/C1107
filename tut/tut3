void levelOrderTraversal(BSTNode* root)
{

    /* add your code here */
    // bin tree with root 0 and children 1,2 then gc 3, 4 etc to 6
    // q 0 => d q 0; q 1, q 2; d q 1 (q.head now 2); q 3(t->left), q 4; 
    // d q 2 (q.head now 3); q 5, q 6;
    // d q 3 (q.head now 4); t->left == NULL hence skip enqueue; etc
    Queue q;
    q.head = NULL;
    q.tail = NULL;
    BSTNode *temp;
    temp = root;

    if(temp != NULL){
     enqueue(&q.head,&q.tail,temp);
     while(!isEmpty(q.head)){
        temp = dequeue(&q.head, &q.tail);
        printf("%d", temp->item);
        if(temp->left != NULL)
            enqueue(&q.head,&q.tail,temp->left);
        if(temp->right != NULL)
            enqueue(&q.head,&q.tail,temp->right);
        }
    }
}



void preOrderIterative(BSTNode *root)
{
	 /* add your code here */
	 // Have to push the right side 1st as the left side enters later hence 1st to exit
	 Stack s;
	 BSTNode *temp;
	 s.top = NULL;
	 temp = root;

	 if(temp != NULL){
        push(&s, temp);
        do {
            temp = pop(&s);
            printf("%d ", temp->item);
            if(temp->right != NULL)
                push(&s, temp->right);
            if(temp->left != NULL)
                push(&s, temp->left);
        }while(!isEmpty(&s));
	 }

}


int maxDepth(BTNode *node)
{
    /* add your code here */
    int l, r;
    if(node == NULL)
        return -1;

    l = maxDepth(node->left);
    r = maxDepth(node->right);

    if(l>r)
        return l+1;
    else return r+1;
}


BTNode *searchNode(BTNode *node, int key)
{
    /* add your code here */
    // ONLY FOR BST not BT
    
    if(node == NULL)
        return NULL;
    else if(node->item == key){
        return node;
    }

    if(node->item >key){
        searchNode(node->left, key);
    }
    else if(node->item <key){
        searchNode(node->right, key);
    }


}
