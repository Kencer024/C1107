//close addressing
int HashInsert(HashTable* Q1Ptr, int key)
{
    //Write your code here
    ListNode *temp, *newNode;

    if(HashSearch(*Q1Ptr, key) != NULL)
        return 0;

    int index = Hash(key, Q1Ptr->hSize);


    newNode = malloc(sizeof(ListNode));
    newNode->key = key;
    newNode->next = NULL;
    newNode->pre = NULL;

    temp = Q1Ptr->Table[index].head;
    if(temp == NULL)
    {
        Q1Ptr->Table[index].head = newNode;
        Q1Ptr->Table[index].head->next = NULL;
    }

    else
    {
        newNode->next = Q1Ptr->Table[index].head;
        Q1Ptr->Table[index].head->pre = newNode;
        Q1Ptr->Table[index].head = newNode;
    }

    Q1Ptr->Table[index].size++;
    Q1Ptr->nSize++;

    return 1;

}

int HashDelete(HashTable* Q1Ptr, int key)
{
    //Write your code here
    ListNode *temp;

    if(HashSearch(*Q1Ptr, key)==NULL)
        return 0;

    int index = Hash(key, Q1Ptr->hSize);

    temp = HashSearch(*Q1Ptr, key);
    if(temp->next != NULL && temp->pre != NULL)
    {
        temp->pre->next = temp->next;
        temp->next->pre = temp->pre;
    }
    else if(temp->next == NULL)
    {
        temp->pre->next = NULL;
    }
    else
    {
        Q1Ptr->Table[index].head = temp->next;
    }
    Q1Ptr->Table[index].size--;
    Q1Ptr->nSize--;
    return 1;
}

