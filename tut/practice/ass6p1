//close addressing
int HashInsert(HashTable* Q1Ptr, int key)
{
    //Write your code here
    ListNode *temp, *newNode;

    if(HashSearch(*Q1Ptr, key) != NULL)
        return 0;

    int index = Hash(key, Q1Ptr->hSize);


    newNode = malloc(sizeof(ListNode));
    newNode->key = key;
    newNode->next = NULL;
    newNode->pre = NULL;

    temp = Q1Ptr->Table[index].head;
    if(temp == NULL)
    {
        Q1Ptr->Table[index].head = newNode;
        Q1Ptr->Table[index].head->next = NULL;
    }

    else
    {
        newNode->next = Q1Ptr->Table[index].head;
        Q1Ptr->Table[index].head->pre = newNode;
        Q1Ptr->Table[index].head = newNode;
    }

    Q1Ptr->Table[index].size++;
    Q1Ptr->nSize++;

    return 1;

}

int HashDelete(HashTable* Q1Ptr, int key)
{
    //Write your code here
    ListNode *temp;

    if(HashSearch(*Q1Ptr, key)==NULL)
        return 0;

    int index = Hash(key, Q1Ptr->hSize);

    temp = HashSearch(*Q1Ptr, key);
    if(temp->next != NULL && temp->pre != NULL)
    {
        temp->pre->next = temp->next;
        temp->next->pre = temp->pre;
    }
    else if(temp->next == NULL)
    {
        temp->pre->next = NULL;
    }
    else
    {
        Q1Ptr->Table[index].head = temp->next;
    }
    Q1Ptr->Table[index].size--;
    Q1Ptr->nSize--;
    return 1;
}

//open addr
int HashInsert(int key, HashSlot hashTable[])
{
   //Write your code here
   int index,keymod,i=0,n=0,del,del_i,j=0,k=0;

   keymod = hash2(key);
   while(i<TABLESIZE)
   {
       index = hash1(key + i *keymod);
       if(hashTable[index].indicator == EMPTY)
       {
           hashTable[index].key = key;
           hashTable[index].indicator = USED;
           return n;
       }
       else if(hashTable[index].indicator == USED)
       {
           n++;
           if(hashTable[index].key == key)
           {
               return -1;
           }
       }
       else
       {
           del_i = i;
           while(del_i<TABLESIZE)
           {
               del = hash1(key + del_i*keymod);
               if(hashTable[del].indicator == USED)
               {
                   n++;
                   if(hashTable[index].key == key)
                   {
                       return -1;
                   }
               }
               else if(hashTable[del].indicator == EMPTY)
               {
                   hashTable[index].key = key;
                   hashTable[index].indicator = USED;
                   return n;
               }
               del_i++;
           }
           hashTable[index].key = key;          //if cant find empty means gone through everything and no duplicates
           hashTable[index].indicator = USED;
           return n;

       }
       i++;
   }
    return n;
}

int HashDelete(int key, HashSlot hashTable[])
{
   //Write your code here
   int index, keymod,i=0,j=0,k=0;

   index = hash1(key);
   keymod = hash2(key);

   while(i<TABLESIZE)
   {
       if(hashTable[index].indicator == EMPTY)
            return -1;
       if(hashTable[index].key == key)
       {
           if(hashTable[index].indicator == DELETED)
           {
               j++;
               i++;
           }
           else
           {
               hashTable[index].indicator = DELETED;
               return i+1-j;
           }
       }
       k++;
       i++;
       index = hash1(key + k*keymod);
   }
    return -1;
}

