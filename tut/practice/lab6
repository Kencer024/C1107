void dualSearch(int A[], int size, int K, int dualIndex[])
{
   // Write your code here
   int i,j;

   for(i=0;i<size;i++)
   {
       for(j=0;j<size;j++)
       {
           if(A[j]+A[i]==K)
           {
               dualIndex[0]=i;
               dualIndex[1]=j;
               return ;
           }
       }
   }


}

void dualSortedSearch(int A[], int size, int K, int dualIndex[])
{
   // Write your code here
   int i,j;
   int temp;
   i=0;
   j=size-1;

   while(i<j)
   {
       temp = A[i]+A[j];
       if(temp == K)
       {
           dualIndex[0] = i;
           dualIndex[1] = j;
           return;
       }
       else if(temp<K)
       {
           i++;
       }
       else
       {
           j--;
       }
   }



}

int partition (int A[], int low, int high)
{
    int pivot = A[high];
    int i = (low - 1);

    int temp;
    for (int j = low; j <= high- 1; j++)
    {
        if (A[j] < pivot)
        {
            i++;

            temp = A[i];
            A[i] = A[j];
            A[j] = temp;
        }
    }

    temp = A[i+1];
    A[i+1]= A[high];
    A[high] = temp;
    return (i + 1);
}

void quickSort(int A[], int low, int high)
{
    if (low < high)
    {
        int pivot = partition(A, low, high);

        quickSort(A, low, pivot - 1);
        quickSort(A, pivot + 1, high);
    }
}


ListNode* HashSearch(HashTable Q3Hash, int key)
{
    // Write your code here
    //hsize might not be 0 but temp might be null
    int index;


    ListNode *temp;

    if(Q3Hash.hSize ==0 )
    {
        return NULL;
    }

    index = Hash(key, Q3Hash.hSize);
    temp = Q3Hash.Table[index].head;


    while(temp != NULL)
    {
        temp = temp->next;
        if(temp->key == key)
            return temp;
    }
    return NULL;

}

int HashInsert(HashTable* Q3HashPtr, int key)
{
    // Write your code here
    int index=Hash(key, Q3HashPtr->hSize),n=0;
    ListNode *temp,*newNode;

    printf("C\n");

    if(HashSearch(*Q3HashPtr, key) != NULL)
        return 0;

    newNode = (ListNode *) malloc(sizeof(ListNode));
    newNode->key = key;
    newNode->next = NULL;




    if(Q3HashPtr->Table[index].head == NULL)
    {
        printf("A\n");
        Q3HashPtr->Table[index].head = newNode;
    }


    else{
        printf("B\n");
        temp = Q3HashPtr->Table[index].head;
        while(temp->next!=NULL)
        {
            temp = temp->next;
            n++;
        }
    temp->next = newNode;
    }


    Q3HashPtr->Table[index].size++;
    Q3HashPtr->nSize++;

    return 1;
}


ListNode* HashSearch(HashTable Q3Hash, int key)
{
    // Write your code here
    //hsize might not be 0 but temp might be null
    int index;


    ListNode *temp;

    if(Q3Hash.hSize ==0 )
    {
        return NULL;
    }

    index = Hash(key, Q3Hash.hSize);
    temp = Q3Hash.Table[index].head;


    while(temp != NULL)
    {
        temp = temp->next;
        if(temp->key == key)
            return temp;
    }
    return NULL;

}

int HashInsert(HashTable* Q3HashPtr, int key)
{
    // Write your code here
    int index=Hash(key, Q3HashPtr->hSize),n=0;
    ListNode *temp,*newNode;

    printf("C\n");

    if(HashSearch(*Q3HashPtr, key) != NULL)
        return 0;

    newNode = (ListNode *) malloc(sizeof(ListNode));
    newNode->key = key;
    newNode->next = NULL;




    if(Q3HashPtr->Table[index].head == NULL)
    {
        printf("A\n");
        Q3HashPtr->Table[index].head = newNode;
    }


    else{
        printf("B\n");
        temp = Q3HashPtr->Table[index].head;
        while(temp->next!=NULL)
        {
            temp = temp->next;
            n++;
        }
    temp->next = newNode;
    }


    Q3HashPtr->Table[index].size++;
    Q3HashPtr->nSize++;

    return 1;
}
