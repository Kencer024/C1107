void in2Post(char* infix, char* postfix)
{
    // Write your code here
    //take note of when to postfix++
    //precedence(peek(s))<=pre(c) remember also got equal
    char *c, c1;

    c = infix;

    Stack s;
    s.head = NULL;
    s.size = 0;

    while(*c != '\0')
    {
        if(isalpha(*c) || isdigit(*c))
        {
            //printf("A\n");
            *postfix = *c;
            postfix++;
        }

        else if(*c == ')')
        {
            //printf("B\n");
            while(peek(s)!= '(')
            {
                c1 = peek(s);
                pop(&s);
                *postfix = c1;
                postfix++;
            }
            pop(&s);
        }
        else if(*c == '(')
        {
            //printf("C\n");
            push(&s, *c);

        }

        else{
            while(!isEmptyStack(s) && peek(s)!='(')
            {
                //printf("D\n");
                if(*c == '+' || *c == '-')
                {

                    c1 = peek(s);
                    //printf("%c\n",c1);
                    if(c1 == '*' || c1 == '/')
                    {
                        *postfix = c1;
                        printf("pf is %c",*postfix);
                        pop(&s);
                        postfix++;
                    }
                    else
                    {
                        *postfix = c1;
                        printf("pf is %c",*postfix);
                        pop(&s);
                        postfix++;
                    }
                }
                else
                    break;
            }
            push(&s, *c);
        }
        c++;
    }
    while(!isEmptyStack(s))
    {
        *postfix = peek(s);
        pop(&s);
        postfix++;
    }
    *postfix = '\0';

}


double exePostfix(char* postfix)
{
	// Write your code here
    //its op2 /op1 and op2 - op1 and nt the other way around
	double op1,op2;

	Stack s;
	s.head = NULL;
	s.size = 0;

	while(*postfix != '\0')
    {
        if(*postfix == '+' || *postfix == '-' || *postfix == '*' || *postfix == '/')
        {
            op1 = peek(s);
            //printf("op1 is %f\n",peek(s));
            pop(&s);
            op2 = peek(s);
            //printf("op2 is %f\n",peek(s));
            pop(&s);
            switch(*postfix)
            {
                case '+' :
                    push(&s,op1+op2);
                    break;
                case '-' :
                    push(&s,op2-op1);
                    break;
                case '*' :
                    push(&s,op1*op2);
                    break;
                case '/' :
                    push(&s,op2/op1);
                    break;
            }
        }
        else{
            push(&s,*postfix-48);
            //printf("%f\n",peek(s));
        }
        postfix++;
    }
    return peek(s);

}


int precedence(char c)
{
    if(c=='*' || c == '/')
        return 1;
    else return 0;
}

void in2Pre(char* infix, char* prefix)
{
    // Write your code here
    //remember how to reverse string
    //key idea is that its the same as in2post but reverse at start and end
    char *c,*c2,*ogpre;
    int i, n=0, j=0;

    //ogpre =prefix;

    Stack s;
    s.head = NULL;
    s.size = 0;

    c = infix;

    ogpre = prefix;

    while(*c != '\0')
    {
        c++;
    }

    c--;

    while(c != infix-1)
    {
        if(isalpha(*c) || isdigit(*c))
        {
            *ogpre = *c;
            n++;
            ogpre++;
        }
        else if(*c == '(')
        {
            while(peek(s) != ')')
            {
                *ogpre = peek(s);
                pop(&s);
                n++;
                ogpre++;
            }
            pop(&s);
        }
        else if(*c == ')')
            push(&s, *c);

        else{
            while(!isEmptyStack(s) && peek(s) != ')')
            {
                if(precedence(peek(s)) >= precedence(*c))
                {
                    *ogpre = peek(s);
                    pop(&s);
                    n++;
                    ogpre++;

                }
                else
                    break;
            }
            push(&s, *c);
        }
        c--;
    }
    while(!isEmptyStack(s))
    {
        *ogpre = peek(s);
        n++;
        ogpre++;
        pop(&s);
    }
    //ogpre = '\0';
    ogpre --;

    printf("%c ",*ogpre);

    int count=0;

    for(i=0;i<n;i++)
    {


        c[i] = *ogpre;
        //printf("%c ",c[i]);
        ogpre--;
        count++;
    }
    printf("\n");
    for(i=0;i<count;i++)
    {
        *prefix = c[i];
        //printf("%c ",c[i]);
        prefix++;
    }
    prefix = '\0';
}
