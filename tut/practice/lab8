void DFS_I (Graph g, int v)
{
    //Write your code here
    Stack s;
    s.head = NULL;
    s.size = 0;
    int i,w;


    int *check;
    check = (int *)malloc(sizeof(int)*g.V);
    for(i=0;i<g.V;i++)
        check[i]=0;


    push(&s,v);
    check[v-1] = 1;


    int uV;
    while(isEmptyStack(s)==0)
    {
        w = peek(s);
        uV =0;
        for(i=0;i<g.V;i++)
        {
            if(g.matrix[w-1][i]==1 && check[i] ==0){
                push(&s,i+1);
                check[i] =1;
                uV =1;
                break;
            }
        }

        if(uV == 0){
            printf("%d ",w);
            pop(&s);

        }

    }
    free(check);

}


void DFS_R (Graph_DFS g, int v)
{
    //Write your code here
    int i;
    g.visited[v-1] = 1;

    for(i=0;i<g.V;i++)
    {
        if(g.matrix[v-1][i]==1 && g.visited[i]==0){
            DFS_R(g,i+1);
        }
    }

    printf("%d ",v);
}
