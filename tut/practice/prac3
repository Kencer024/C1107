/////////////////////ass3_qn1/////////////////////////////////////////////////////////////

int identical(BTNode *tree1, BTNode *tree2)

{
   /* add your code here */
    BTNode *node1, *node2;

    node1 = tree1;
    node2 = tree2;

    if(node1 == NULL && node2 == NULL)   // means go through whole tree liao
    return 1;

    if((node1 == NULL && node2!= NULL) || (node1 != NULL && node2 == NULL))
        return 0;

    if(node1->item != node2->item)
    {   //printf("n1 is %d, n2 is %d \n", node1->item, node2->item);
        return 0;
    }


    if(!identical(node1->left, node2->left))return 0;
    if(!identical(node1->right, node2->right))return 0;


}


//////////////////////////ass3_qn2////////////////////////////////////////////////////////

int maxHeight(BTNode *node)

{
    /* add your code here */
    int l, r;

    if(node==NULL)
        return -1;

    l = maxHeight(node->left);
    r = maxHeight(node->right);

    if(r>l)
        return r+1;
    else
        return l+1;
}


////////////////////////////ass3_qn3//////////////////////////////////////////////////////


// THIS IS WRONG NEVER ACCOUNT FOR IF ITS JUST 1 STRAIGHT CHAIN ALL THE WAY
int countOneChildNodes(BTNode *node)

{
    /* add your code here */
    
    int l, r;

    if(node == NULL)
        return 0;
    if((node->left == NULL && node->right != NULL) || (node->left != NULL && node->right == NULL))
        return 1;

    l = countOneChildNodes(node->left);
    r = countOneChildNodes(node->right);

    return l+r;
}


/////////////////////////////Corrected_ass3_qn3/////////////////////////////////////////////////////

int countOneChildNodes(BTNode *node)

{
    /* add your code here */
    int l, r;

    if(node == NULL)return 0 ;

    l = countOneChildNodes(node->left);
    if(((node->left)&& !(node->right))|| (!(node->left)&&(node->right))){       //XOR
        return l +1;
    }

    r = countOneChildNodes(node->right);
    if(((node->left)&& !(node->right))|| (!(node->left)&&(node->right))){       //XOR
        return r +1;
    }
    return l+r;
}

//////////////////////////ass3_qn4////////////////////////////////////////////////////////

int sumOfOddNodes(BTNode *node)

{
    /* add your code here */
    int l,r;

    if(node == NULL)
    {
       return 0;
    }

    l = sumOfOddNodes(node->left);
    if(node->item %2 !=0)
    {
        return node->item;
    }

    r = sumOfOddNodes(node->right);
    if(node->item %2 !=0)
    {
        return node->item;
    }

    return l+r;
}
