

void inOrderTraversal(BSTNode *root)
{
	 /* add your code here */
	 Stack s;
	 s.top = NULL;

	 BSTNode *cur, *popped;
	 cur = root;
	 
	 if(root == NULL)
        return;

	 while(cur != NULL)
     {
         push(&s, cur);
         cur = cur->left;
     }

     while(!isEmpty(&s))
     {
          popped = pop(&s);
          printf("%d ", popped->item);
          if(popped->right != NULL){
            cur = popped->right;
            while(cur != NULL)
                {
                    push(&s, cur);
                    cur = cur->left;
                }

          }

     }

     if(cur == NULL && isEmpty(&s))
        return;

}





void postOrderIterativeS1(BSTNode *root)
{
	 /* add your code here */
	 Stack s;
	 s.top = NULL;
     if (root != NULL)
     {
         do
         {
             while(root != NULL){
                    if(root->right != NULL)
                    {
                        push(&s, root->right);
                        push(&s, root);
                        root = root->left;
                    }
                    else
                    {
                        push(&s, root);
                        root = NULL;
                    }
             }

             root = pop(&s);

             if(root->right != NULL && (peek(&s) == root->right))
             {
                 pop(&s);
                 push(&s, root);
                 root = root->right;
             }
             else
             {
                 printf("%d ", root->item);
                 root = NULL;
             }
         }while(!isEmpty(&s));
     }
     else
        return;
}
