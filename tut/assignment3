int identical(BTNode *tree1, BTNode *tree2)

{
   /* add your code here */
    if(tree1 == NULL || tree2 == NULL)return -1;
    if(!identical(tree1->left, tree2->left))return 0;    //if any comparisons returns 0 then break and return 0
    if(!identical(tree1->right, tree2->right))return 0;
    if(((tree1->left)&& !(tree2->left))|| (!(tree1->left)&&(tree2->left))){       //XOR for if 1 branch has left node but no right node
        return 0;}
    else if (((tree1->right)&& !(tree2->right))|| (!(tree1->right)&&(tree2->right))){       //XOR
        return 0;}
    else if(tree1->item != tree2->item){                       //if the tree1 item and tree2 items are diff, return 0
        //printf("%d, %d\n", tree1->item, tree2->item);
        return 0;
    }
    else {                                            //if no conditions are activated means the 2 nodes are equal
        //printf("%d, %d\n", tree1->item, tree2->item);
        return 1;
    }
    


}


int maxHeight(BTNode *node)

{
    /* add your code here */
    int l, r;

    if(node == NULL)return -1;

    l = maxHeight(node->left);
    r = maxHeight(node->right);
    if(l>r) return l+1;
    else return r+1;

}


int countOneChildNodes(BTNode *node)

{
    /* add your code here */
    
    int l, r;

    if(node == NULL)return 0 ;

    l = countOneChildNodes(node->left);
    if(((node->left)&& !(node->right))|| (!(node->left)&&(node->right))){       //XOR
        return l +1;
    }

    r = countOneChildNodes(node->right);
    if(((node->left)&& !(node->right))|| (!(node->left)&&(node->right))){       //XOR
        return r +1;
    }
    return l+r;
}


int sumOfOddNodes(BTNode *node)

{
    /* add your code here */
    if(node == NULL) return NULL;

    if(node->item %2 !=0)
        return node->item;

    int l, r;
    l = sumOfOddNodes(node->left);
    r = sumOfOddNodes(node->right);

    return l+r;
}
