#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define SIZE 200 //The number digit limitation

typedef struct _btnode{
	int item;
	struct _btnode *left;
	struct _btnode *right;
} BTNode;   // You should not change the definition of BTNode

typedef struct _node{
     BTNode* item;
     struct _node *next;
}StackNode;

typedef struct _stack{
   int size;
   StackNode *head;
}Stack;

void deleteTree(BTNode **root);

void createExpTree(BTNode** root,char* prefix);
void printTree(BTNode *node);
void printTreePostfix(BTNode *node);
double computeTree(BTNode *node);

void push(Stack *sPtr,  BTNode* item);
int pop(Stack *sPtr);
BTNode *peek(Stack s);
int isEmptyStack(Stack s);

int main()
{
    char prefix[SIZE];
    BTNode* root=NULL;

    //printf("Enter an prefix expression:\n");
    gets(prefix);

    createExpTree(&root, prefix);

    // printf("The Infix Expression:\n");
    printTree(root);
    printf("\n");
    //printf("The Postfix (Reverse Polish) Expression:\n");
    printTreePostfix(root);
    printf("\n");
    //printf("Answer ");
    printf("%.2f\n", computeTree(root));
    deleteTree(&root);
    return 0;
}

void createExpTree(BTNode** root,char* prefix)
{
    //Write your code here
    Stack s, t, s2;
    s.head = NULL;
    s.size = 0;

    t.head = NULL;
    t.size = 0;

    s2.head = NULL;
    s2.size = 0;

    BTNode *temp, *pre;

    int i1,i2,n, n_,i;
    int op = 0;
    char *c, c1;
    i1 = i2 = n_ =0;
    n = 0;

    temp =*root;

    c = prefix;

    while((*c)!='\0')       // start from back
        c++;
    c--;

    //push the stuff into the stack
     while((c)!=prefix-1)
    {

             if((*c) >47 && (*c)<58)
            {
                op =0;
                do
                {
                    i2 = ((*c)-48)*n;
                    i1 += i2;
                    n*= 10;
                    i2 = i1;
                    //printf("i1 is %d\n",i2);
                    c--;
                }while((*c) >47 && (*c)<58);//n_++;
                push(&s,i1);
                push(&t,op);
            }
            else if(*c == '+' || *c == '-' || *c == '*' || *c == '/')
            {
                i1 = *c;
                op = 1;
                //n_++;
                //printf("%c\n",*c);
                if((c)!=prefix)              // to solve when the FUCKING c == infix -1, if not will keep going
                    c--;
                else                        // to signify end of string AKA c == infix
                {
                    push(&s, i1);
                    push(&t, 1);
                    break;
                }
                push(&s,i1);
                push(&t,op);
            }

            else
                {

                    n =1;
                    i1=i2=0;
                    c--;
                }
    }
    /*
    s2 = t;

    while(!isEmptyStack(s2))
    {
        n_++;
        printf("%d ",peek(s2));
        pop(&s2);
    }*/
    n = 0;
    //printf("n is %d\n",n);
    //first item will always be an opt
    int createBTNode(BTNode **root, Stack S, Stack T, int n){
        /*
        printf("Error A n is %d\n",n);
        if(n!= 0)
        {
            printf("Error B c is %c\n",peek(S));
            for(i=0;i<n;i++)
            {
                printf("EC is %d\n",i);
                pop(&S);
                pop(&T);
            }

        }*/
        printf("c is %c\n",peek(S));
        printf("t is %d\n", peek(T));
        if(peek(T) == 0)
        {
            printf("A\n");
            *root = malloc(sizeof(BTNode));
            (*root)->item = peek(S);
            (*root)->left = NULL;
            (*root)->right = NULL;
            printf("root->item is %c\n",(*root)->item);
            //pop(&S);
            //pop(&T);
            n++;
            return n;
        }
        else
        {
            n=0; 
            printf("S is %d\n",peek(S));
            *root = malloc(sizeof(BTNode));
            //printf("B2.5\n");
            (*root)->item = peek(S);
            //printf("B2\n");
            pop(&S);
            pop(&T);
            n++;
            printf("n is %d\n",n);
            printf("root->item is %c\n",(*root)->item);
            /*if((*root)->left == NULL)
                {*/
            //printf("B4\n");
            n = createBTNode(&(*root)->left,S ,T, n);
            //printf("B5\n");
                /*}
            if((*root)->right == NULL)
                {*/


            printf("B6\n");
            if(n!= 0)       //80% there but the changing of n is not correct
            {
                printf("Error B c is %c\n",peek(S));
                for(i=0;i<n;i++)
                {
                    printf("EC is %d\n",i);
                    pop(&S);
                    pop(&T);
                }

            }
            printf("n2 is %d\n",n);
            n = createBTNode(&(*root)->right,S ,T, n);
            printf("both not NULL\n");
            n++;
            return n;
        }
    }

    createBTNode(&temp, s, t, n);
    //for checking whether no. of char is correct
    //checking stack works lol
    /*
    while(!isEmptyStack(s))
    {
        printf("%d ",peek(s));
        pop(&s);
    }
    while(!isEmptyStack(t))
    {
        n_++;
        //printf("%d ",peek(t));
        pop(&t);
    }


    printf("%d",n_);
    //making it back into a string so that i can use my prev version of code lol

    char ch_n[n_];

    ch_n[0] = peek(s);
    printf("%c \n", ch_n[0]);

    for(i=0;i<n_;i++)
    {
        ch_n[i] = peek(s);
        printf("%c \n",ch_n[i]);
        pop(&s);
    }


    char *c_n;
    c_n = &ch_n[0];
    printf("cn is %c\n", *c_n);

    while(*c_n != '\0')
    {
        printf("%c ", *c_n);
        c_n++;
    }

    //+c*-xm+/B-7,!*/







}

void printTree(BTNode *node){
	 /* add your code here */
	 //In order traversal
	 if(node == NULL)
        return;

     printTree(node->left);
     if((node->item == '+' || node->item == '-' || node->item == '*' || node->item == '/' ) && (node->left != NULL && node->right !=NULL))
        printf("%c ",node->item);
     else
        printf("%d ",node->item);
     printTree(node->right);
}


void printTreePostfix(BTNode *node){
   //Write your code here
   //Post Order Traversal
   if(node == NULL)
        return;

    printTreePostfix(node->left);
    printTreePostfix(node->right);
    if((node->item == '+' || node->item == '-' || node->item == '*' || node->item == '/' ) && (node->left != NULL && node->right !=NULL))
        printf("%c ",node->item);
    else
        printf("%d ",node->item);

}

double computeTree(BTNode *node){
    //Write your code here
    //Using the concept of max depth in assignment 4 to traverse the tree
    //if node->item is number then return the number else follow the switch case

    double l, r, ans;

    if(node == NULL)return node->item;
    //printf("A\n");
    if(node->left != NULL)
        l = computeTree(node->left);
    if(node->right != NULL)
        r = computeTree(node->right);
    //printf("%c\n",node->item);
    if((node->item == '+' || node->item == '-' || node->item == '*' || node->item == '/' ) && (node->left != NULL && node->right !=NULL))
    {
        switch(node->item)
    {
        case '+' : return l+r;

        case '-' : return l-r;

        case '*' : return l*r;

        case '/' : return l/r;
    }
    }
    else
        return node->item;


}

void push(Stack *sPtr, BTNode *item){
    StackNode *newNode;
    newNode = malloc(sizeof(StackNode));
    newNode->item = item;
    newNode->next = sPtr->head;
    sPtr->head = newNode;
    sPtr->size++;
}

int pop(Stack *sPtr){
    if(sPtr == NULL || sPtr->head == NULL){
        return 0;
    }
    else{
       StackNode *temp = sPtr->head;
       sPtr->head = sPtr->head->next;
       free(temp);
       sPtr->size--;
       return 1;
    }
}

BTNode *peek(Stack s){
    return s.head->item;
}

int isEmptyStack(Stack s){
     if(s.size == 0) return 1;
     else return 0;
}

void deleteTree(BTNode **root){
    BTNode* temp;
    if(*root !=NULL)
    {
        temp = (*root)->right;
        deleteTree(&((*root)->left));
        free(*root);
        *root = NULL;
        deleteTree(&temp);
    }
}



#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define SIZE 200 //The number digit limitation

typedef struct _btnode{
	int item;
	struct _btnode *left;
	struct _btnode *right;
} BTNode;   // You should not change the definition of BTNode

typedef struct _node{
     BTNode* item;
     struct _node *next;
}StackNode;

typedef struct _stack{
   int size;
   StackNode *head;
}Stack;

void deleteTree(BTNode **root);

void createExpTree(BTNode** root,char* prefix);
void printTree(BTNode *node);
void printTreePostfix(BTNode *node);
double computeTree(BTNode *node);

void push(Stack *sPtr,  BTNode* item);
int pop(Stack *sPtr);
BTNode *peek(Stack s);
int isEmptyStack(Stack s);

int main()
{
    char prefix[SIZE];
    BTNode* root=NULL;

    //printf("Enter an prefix expression:\n");
    gets(prefix);

    createExpTree(&root, prefix);

    // printf("The Infix Expression:\n");
    printTree(root);
    printf("\n");
    //printf("The Postfix (Reverse Polish) Expression:\n");
    printTreePostfix(root);
    printf("\n");
    //printf("Answer ");
    printf("%.2f\n", computeTree(root));
    deleteTree(&root);
    return 0;
}

void createExpTree(BTNode** root,char* prefix)
{
    //Write your code here
    Stack s, t, s2;
    s.head = NULL;
    s.size = 0;

    t.head = NULL;
    t.size = 0;

    s2.head = NULL;
    s2.size = 0;

    BTNode *temp, *pre;

    int i1,i2,n, n_,i;
    int op = 0;
    char *c, c1;
    i1 = i2 = n_ =0;
    n = 0;

    temp =*root;

    c = prefix;

    while((*c)!='\0')       // start from back
        c++;
    c--;

    //push the stuff into the stack
     while((c)!=prefix-1)
    {

             if((*c) >47 && (*c)<58)
            {
                op =0;
                do
                {
                    i2 = ((*c)-48)*n;
                    i1 += i2;
                    n*= 10;
                    i2 = i1;
                    //printf("i1 is %d\n",i2);
                    c--;
                }while((*c) >47 && (*c)<58);//n_++;
                push(&s,i1);
                push(&t,op);
            }
            else if(*c == '+' || *c == '-' || *c == '*' || *c == '/')
            {
                i1 = *c;
                op = 1;
                //n_++;
                //printf("%c\n",*c);
                if((c)!=prefix)              // to solve when the FUCKING c == infix -1, if not will keep going
                    c--;
                else                        // to signify end of string AKA c == infix
                {
                    push(&s, i1);
                    push(&t, 1);
                    break;
                }
                push(&s,i1);
                push(&t,op);
            }

            else
                {

                    n =1;
                    i1=i2=0;
                    c--;
                }
    }
     /*
    while(!isEmptyStack(s))
    {
        printf("%c ",peek(s));
        pop(&s);
    }

    s2 = t;

    while(!isEmptyStack(s2))
    {
        n_++;
        printf("%d ",peek(s2));
        pop(&s2);
    }*/
    n = 0;
    //printf("n is %d\n",n);
    //first item will always be an opt


    int createBTNode(BTNode **root, Stack S, Stack T, int n){

        printf("c is %c\n",peek(S));
        printf("t is %d\n", peek(T));
        if(peek(T) == 0)
        {
            printf("A\n");
            *root = malloc(sizeof(BTNode));
            (*root)->item = peek(S);
            (*root)->left = NULL;
            (*root)->right = NULL;
            printf("root->item is %c\n",(*root)->item);
            //pop(&S);
            //pop(&T);
            n++;
            return n;
        }
        else
        {
            n=0;
            printf("S is %d\n",peek(S));
            *root = malloc(sizeof(BTNode));
            //printf("B2.5\n");
            (*root)->item = peek(S);
            //printf("B2\n");
            pop(&S);        //opt pops so Stack + 1
            pop(&T);
            //n++;
            printf("n is %d\n",n);
            printf("root->item is %c\n",(*root)->item);

            n = createBTNode(&(*root)->left,S ,T, n);


            printf("n2 is %d\n",n);
            printf("Top of stack is %c\n",peek(S));
            printf("Middle Node c is %c\n",(*root)->item);
            if(n!= 0)
            {
                for(i=0;i<n;i++)
                {
                    printf("i is %d\n",i);
                    printf("Is stack empty %d\n", isEmptyStack(s));
                    printf("before pop is %c\n",peek(S));
                    pop(&S);
                    printf("A\n");
                    pop(&T);
                }

            }


            printf("c after pop is %c\n",peek(S));
            n = createBTNode(&(*root)->right,S ,T, n);
            printf("both not NULL\n");
            n++;
            return n;
        }
    }

    createBTNode(&temp, s, t, n);


    //+c*-xm+/B-7,!*/







}

void printTree(BTNode *node){
	 /* add your code here */
	 //In order traversal
	 if(node == NULL)
        return;

     printTree(node->left);
     if((node->item == '+' || node->item == '-' || node->item == '*' || node->item == '/' ) && (node->left != NULL && node->right !=NULL))
        printf("%c ",node->item);
     else
        printf("%d ",node->item);
     printTree(node->right);
}


void printTreePostfix(BTNode *node){
   //Write your code here
   //Post Order Traversal
   if(node == NULL)
        return;

    printTreePostfix(node->left);
    printTreePostfix(node->right);
    if((node->item == '+' || node->item == '-' || node->item == '*' || node->item == '/' ) && (node->left != NULL && node->right !=NULL))
        printf("%c ",node->item);
    else
        printf("%d ",node->item);

}

double computeTree(BTNode *node){
    //Write your code here
    //Using the concept of max depth in assignment 4 to traverse the tree
    //if node->item is number then return the number else follow the switch case

    double l, r, ans;

    if(node == NULL)return node->item;
    //printf("A\n");
    if(node->left != NULL)
        l = computeTree(node->left);
    if(node->right != NULL)
        r = computeTree(node->right);
    //printf("%c\n",node->item);
    if((node->item == '+' || node->item == '-' || node->item == '*' || node->item == '/' ) && (node->left != NULL && node->right !=NULL))
    {
        switch(node->item)
    {
        case '+' : return l+r;

        case '-' : return l-r;

        case '*' : return l*r;

        case '/' : return l/r;
    }
    }
    else
        return node->item;


}

void push(Stack *sPtr, BTNode *item){
    StackNode *newNode;
    newNode = malloc(sizeof(StackNode));
    newNode->item = item;
    newNode->next = sPtr->head;
    sPtr->head = newNode;
    sPtr->size++;
}

int pop(Stack *sPtr){
    if(sPtr == NULL || sPtr->head == NULL){
        return 0;
    }
    else{
       StackNode *temp = sPtr->head;
       sPtr->head = sPtr->head->next;
       free(temp);
       sPtr->size--;
       return 1;
    }
}

BTNode *peek(Stack s){
    return s.head->item;
}

int isEmptyStack(Stack s){
     if(s.size == 0) return 1;
     else return 0;
}

void deleteTree(BTNode **root){
    BTNode* temp;
    if(*root !=NULL)
    {
        temp = (*root)->right;
        deleteTree(&((*root)->left));
        free(*root);
        *root = NULL;
        deleteTree(&temp);
    }
}

