//Add stack into queue then back into the stack to reverse
void reverseStack(Stack *s)
{
	/* add your code here */
	Queue q;
	q.ll.head = NULL;
	q.ll.size = NULL;
	int temp;
	while(isEmptyStack(s) != 1){
        temp = pop(s);
        enqueue(&q, temp);
	}
	while(isEmptyQueue(&q) != 1){
        temp = dequeue(&q);
        push(s, temp);
	}
}


void reverseFirstKItems(Queue *q, int k)
{
    /* add your code here */
    //put K items of q to stack then the rest to q2
    //pop K item of s to q then dequeue q2 to q
    Queue q2;
    Stack s;
    q2.ll.head = NULL;
    q2.ll.size = 0;
    s.ll.head = NULL;
    s.ll.size = 0;
    int temp,i;
    for(i=0;i<k;i++){           //push to s
        temp = dequeue(q);
        push(&s, temp);         //pushing K items into stack s
    }
    while(isEmptyQueue(q) != 1){    //q2 items contains rest of queue
        temp = dequeue(q);
        enqueue(&q2, temp);
    }
    while(isEmptyStack(&s) != 1){
        temp = pop(&s);
        enqueue(q,temp);
    }
    while(isEmptyQueue(&q2) != 1){
        temp = dequeue(&q2);
        enqueue(q,temp);
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
//A lot of excessive print statement to understand prof's code better
//Diagram of sort function in drive folder

void sortStack(Stack *s)
{
    /* add your code here */
    int temp;
    Stack ts;
    ts.ll.head = NULL;
    ts.ll.tail = NULL;
    ts.ll.size = 0;

    while(!isEmptyStack(s)){
        push(&ts,pop(s));
    }
    printList(&ts);
    printf("\n");
    printList(s);
    while(!isEmptyStack(&ts)){
        temp = pop(&ts);
        printf("ts is ");
        printList(&ts);
        printf("\n");
        while(!isEmptyStack(s) && peek(s) < temp){
            push(&ts,pop(s));
            printf("ts is ");
            printList(&ts);
            printf("\n");
            printf("s is ");
            printList(s);
            printf("\n");
        }
        push(s,temp);
        printf("s is ");
        printList(s);
        printf("\n");
    }

}
