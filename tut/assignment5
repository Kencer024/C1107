void expressionLL(char* infix, LinkedList *inExpLL)
{
    //Write your code here
    //essentially go from back to front
    //as item is added at head pointer, gotta c--;
    //numbers are chars hence gotta change eg. 6 7 to 67
    //after converting char to int, loop then *n then += initial no.
    //eg 6*10 + 7 where n*=10 after each loop
    //account for when its the first digit hence cant loop anymore
    
    int i1,i2,n;
    char *c;
    i1 = 0;
    i2=0;


    c = infix;

    while((*c)!='\0')   //reversing the string
        c++;
    c--;
    n=1;
    do
    {

        if((*c) >47 && (*c)<58)     //check for operands
        {
            i2 = ((*c)-48)*n;
            i1 += i2;

            n*= 10;
            i2 = i1;

            //printf("%d\n",i1);
            if ((c)==infix)       // when its the first digit
            {
                insertNode(inExpLL, i1, OPERAND);
            }
            c--;
        }
        else
        {
            //printf("%d\n",i1);
            if (n != 1)
                insertNode(inExpLL, i1, OPERAND);
            insertNode(inExpLL, *c,OPT);
            n=1;
            //printf("%c\n", *c);
            c--;
            i1=i2=0;
        }
    }while((c)!=infix-1);
}




void in2PreLL(char* infix, LinkedList *inExpLL)
{
  //Write your code here
  //essentially same concept as Chpt 8, infix to postfix but reverse the order
  //pop(s) gives 1 or 0 and not the value so use peek(s)
  //Prob arises when c = infix-1
  //for the bottom precedence comparison, if c has same precedence as peek(s) DONT FUCKING POP
    Stack s;
    s.head = NULL;
    s.size = 0;

    int i1,i2,n;
    int op;
    char *c;
    i1 = 0;
    i2=0;
    n = 1;
    int flag =0 ;


    c = infix;

    while((*c)!='\0')       // start from back
        c++;
    c--;

    while((c)!=infix-1)
    {
        if((*c) >47 && (*c)<58)
        {
            while((*c) >47 && (*c)<58)
                {
                    i2 = ((*c)-48)*n;
                    i1 += i2;
                    n*= 10;
                    i2 = i1;
                    printf("%d\n",*c-48);
                    if((c)!=infix)              // to solve when the FUCKING c == infix -1, if not will keep going
                        c--;
                    else                        // to signify end of string AKA c == infix
                    {
                        flag = 1;
                        insertNode(inExpLL,i1,OPERAND);
                        break;
                    }

                }
            if(flag == 1)break;
            insertNode(inExpLL,i1,OPERAND);
            n =1;
            i1=i2=0;
        }
        if((*c) =='(')
        {
            while(peek(s)!=')')
                {
                    op = peek(s);
                    printf("%c\n",op);
                    pop(&s);
                    insertNode(inExpLL,op,OPT);
                }
            pop(&s);
        }
        else if((*c)==')')
            push(&s,*c);
        else
        {
            while(!isEmptyStack(s)&&peek(s)!=')')
                {
                    if((*c) == '+' || (*c) == '-')
                    {
                        op = peek(s);
                        printf("%c\n",op);
                        if(op == '*' || op == '/')
                            {pop(&s);
                            insertNode(inExpLL,op,OPT);}
                        else            // if op = + or -, leave it 
                            break;
                    }
                    else
                        break;

                }
            push(&s,*c);
        }
        c--;
    }
    while(!isEmptyStack(s))
    {
        op = peek(s);
        printf("%c\n",op);
        pop(&s);
        insertNode(inExpLL,op,OPT);
    }

}
